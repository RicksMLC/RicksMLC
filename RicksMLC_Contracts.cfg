
// https://github.com/jrossignol/ContractConfigurator/wiki/How-To

// https://github.com/RicksMLC/RicksMLC

AGENT {
    // The name of your agency
    name = RicksMLC
  
    // Description of your agency
    description = Rick Kerman and His Mid Life Crisis Experience:  All Systems operate in Failure-Mode. The success of a system depends on how well it fails.
  
    // Logo URL should be the full path to the image file for the logo (256x160)
    logoURL = RicksMLC/RicksMLC_Logo

    // Logo URL is the full path to the scaled down image for thumbnails (64x40)
    logoScaledURL = RicksMLC/RicksMLC_Logo_Small

    mentality = NoRandomContractMentality
}

CONTRACT_GROUP {
    name = RicksMLCGroup
    displayName = Ricks Mid Life Crisis
    agent = RicksMLC
    tip = Ricks Mid Life Crisis is not really a crisis ...
    minVersion = 1.15.0
}


@PART[kOSMachine1m]:AFTER[kOS] {
    %MODULE[ModuleTestSubject] {
		%useStaging = False
		%useEvent = True
    }
}

@PART[KR-2042]:AFTER[kOS] {
    %MODULE[ModuleTestSubject] {
		%useStaging = False
		%useEvent = True
    }
}


// Unboxing: kOS CX-4181 Self Test
CONTRACT_TYPE {
    name = UnboxKOSModule
    title = Unbox and run kOS CX-4181 Self Test
    group = RicksMLCGroup
    topic = What is kOS
    subject = kOS Module shrink-wrap removed... does it work
    synopsis = Test that the kOS starter module by exeuting the First Unboxing script.
    completedMessage = The box has a working kOS module
    prestige = Trivial
    maxSimultaneous = 1
    maxCompletions = 1
    rewardScience = 2.0
    rewardReputation = 1.0
    rewardFunds = 2000.0
    failureReputation = 3.0
    failureFunds = 100.0
    advanceFunds = 500.0

    sortKey = a

    // Note: KSP:PartTest() throws null exception if targetBody is not set, so...
    targetBody = Kerbin

    REQUIREMENT {
        name = HasRequiredPart
        type = PartUnlocked
        part = kOSMachine1m
    }

    // Pre-launch parameters - has correct kOS module
    PARAMETER {
        name = PartValidation1
        type = PartValidation
        part = kOSMachine1m
    }

    PARAMETER {
        name = PartTest
        type = PartTest
        part = kOSMachine1m
        notes = Does this concept even exist?
    }

    BEHAVIOUR {
        name = ExperimentalPart
        type = ExperimentalPart
        part = kOSMachine1m
    }
}

// Unboxing: kOS KR-2042
CONTRACT_TYPE {
    name = UnboxKOSModuleKR-2042
    title = Unbox and run kOS KR-2042 Self Test
    group = RicksMLCGroup
    topic = This is a small kOS module.
    subject = It comes in such a tiny box! kOS Module shrink-wrap removed... does it work
    synopsis = Test that such a tiny thing as the kOS KR-2042 can actually work.
    completedMessage = The box has a working kOS module!
    prestige = Trivial
    maxSimultaneous = 1
    maxCompletions = 1
    rewardScience = 2.0
    rewardReputation = 1.0
    rewardFunds = 2000.0
    failureReputation = 3.0
    failureFunds = 100.0
    advanceFunds = 500.0

    sortKey = a

    // Note: KSP:PartTest() throws null exception if targetBody is not set, so...
    targetBody = Kerbin

    REQUIREMENT {
        name = HasRequiredPart
        type = PartUnlocked
        part = KR-2042
    }

    // Pre-launch parameters - has correct kOS module
    PARAMETER {
        name = PartValidation1
        type = PartValidation
        part = KR-2042
    }

    PARAMETER {
        name = PartTest
        type = PartTest
        part = KR-2042
        notes = What happens if I press this button?
    }

    BEHAVIOUR {
        name = ExperimentalPart
        type = ExperimentalPart
        part = KR-2042
    }
}


// Verification Test kOS CX-4181 for Flight.
CONTRACT_TYPE {
    name = kOS_VerificationTestForFlight
    title = kOS Module Flight Verification Test
    group = RicksMLCGroup
    topic = kOS Module is ready for flight
    subject = Verifification that the kOS CX-4181 is ready for flight
    genericDescription = Test Verification description
    synopsis = Test that the kOS CX-4181 basic module executes a launch script and flies over the water. An example can be found here github.com/RicksMLC/Script/CX-4181-2-FVT.ks
    completedMessage = The kOS controlled craft launched!
    prestige = Trivial
    maxSimultaneous = 1
    maxCompletions = 2
    rewardScience = 3.0
    rewardReputation = 2.0
    rewardFunds = 4500.0
    failureReputation = 3.0
    failureFunds = 150.0
    advanceFunds = 900.0

    sortKey = b

    // Note: KSP:PartTest() throws null exception if targetBody is not set, so...
    targetBody = Kerbin

    REQUIREMENT {
        name = CompleteUnboxingContract
        type = CompleteContract
        contractType = UnboxKOSModule
    }

    // Pre-launch parameters - has correct kOS module
    PARAMETER {
        name = PreLaunchCriteria
        type = ReachState
        situation = PRELAUNCH
        disableOnStateChange = true
        PARAMETER {
            name = PartValidation1
            type = PartValidation
            part = kOSMachine1m
        }
        // Make sure it does not have an advanced controller (no cheating)...
        PARAMETER {
            name = PartValidationNoSAS
            type = PartValidation
            NONE {
                partModule = ModuleSAS
            }
        }
    }

    PARAMETER {
        name = ReachMinAltitude
        type = ReachState
        minAltitude = 1000
        situation = FLYING
        biome = Water
        disableOnStateChange = true
    }

    PARAMETER {
        name = EndOfProgramPartTest
        type = PartTest
        part = kOSMachine1m
        notes = The script will run the Part Test to verify the script was run - DO NOT CHEAT.
    }

    BEHAVIOUR {
        name = ExperimentalPart
        type = ExperimentalPart
        part = kOSMachine1m
    }
}

// Launch and Recover Qualification Test for the basic kOS module
CONTRACT_TYPE {
    name = kOS_LaunchAndRecoverTest
    title = kOS Launch and Recover Test for Basic Qualification of the kOS Module.
    group = RicksMLCGroup
    description = There is some debate as to just how effective a computer with a hand-crafted script is in controlling a spacecraft for launch and land safely instead leaving a crater.  Can we really replace Kerbals with AI?
    synopsis = Launch and recover a kOS controlled craft. Example github.com/RicksMLC/Script/CX-4181-3-LRT.ks
    completedMessage = All kOS qualification tests passed
    prestige = Significant
    maxSimultaneous = 1
    maxCompletions = 2
    rewardScience = 9.0
    rewardReputation = 5.0
    rewardFunds = 6000.0
    failureReputation = 3.0
    failureFunds = 2000.0
    advanceFunds = 1000.0
    
    sortKey = c

    REQUIREMENT {
        name = CompleteFlightContract
        type = CompleteContract
        contractType = kOS_VerificationTestForFlight
    }

    // Pre-launch parameters - has correct kOS module
    PARAMETER {
        name = PartValidation1
        type = PartValidation
        part = kOSMachine1m
        // This module must exist for the entire test including recovery - do not lose it.
        disableOnStateChange = true
    }

    // Make sure it does not have an advanced controller ...
    PARAMETER {
        name = PartValidationNoSAS
        type = PartValidation
        NONE {
            partModule = ModuleSAS
        }
    }

    // Final parameter for success is to recover the vehicle
    PARAMETER {
        name = RecoverVessel
        type = RecoverVessel
        title = Recover vessel INTACT (these things are expensive)
    }

    PARAMETER {
        name = EndOfProgramPartTest
        type = PartTest
        part = kOSMachine1m
        notes = The script will run the Part Test to verify the script was run - DO NOT CHEAT.
        // Note: KSP:PartTest() throws null exception if targetBody is not set, so...
        targetBody = Kerbin
    }

    REQUIREMENT {
        name = HasRequiredPart
        type = PartUnlocked
        part = kOSMachine1m
    }
}

// Automated Orbit Test
CONTRACT_TYPE {
    name = kOS_OrbitVerificationTest01
    title = kOS Orbit Verification Test
    genericTitle = Initial Orbit Verification Test
    group = RicksMLCGroup

    topic = kOS Script Launch-to-Orbit
    subject = kOS Script Launch-to-Orbit Execution and Verification Test
    genericDescription = Test Verification description.
    synopsis = Execute the Orbit Verification Test script and this contract will ... verify it. This example uses the kOS Boot File in /boot. Example code: github.com/RicksMLC/Script/boot/CX-4181-OVT-Autorun.ks github.com/RicksMLC/Script/CX-4181-4-OVT.ks github.com/RicksMLC/Script/psLib.ks github.com/RicksMLC/Script/OrbitLib.ks
    completedMessage = All verification milestones achieved

    minExpiry = 60.0
    maxExpiry = 120.0
    deadline = 365
    cancellable = true
    declinable = true

    sortKey = d

    // Should this be true?
    autoAccept = false

    prestige = Exceptional
    targetBody = Kerbin

    maxSimultaneous = 1

    rewardScience = 15.0
    rewardReputation = 15.0
    rewardFunds = 20000.0
    failureReputation = 7.0
    failureFunds = 4000.0
    advanceFunds = 3000.0

    REQUIREMENT {
        name = CompleteQualificationContract
        type = CompleteContract
        contractType = kOS_LaunchAndRecoverTest
    }

    PARAMETER {
        name = FirstTargetAltitude
        type = ReachState
        minAltitude = 100000
        disableOnStateChange = true
    }

    PARAMETER {
        name = Orbit
        type = Orbit
        situation = ORBITING
        minAltitude = 100000
        disableOnStateChange = true
    }

    REQUIREMENT {
        name = HasRequiredPart
        type = PartUnlocked
        part = kOSMachine1m
    }

        // Make sure it does not have an advanced controller ...
    PARAMETER {
        name = PartValidationNoSAS
        type = PartValidation
        NONE {
            partModule = ModuleSAS
        }
    }

}